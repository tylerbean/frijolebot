name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: tylerjbean/frijolebot

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Run security scan
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results
        path: trivy-results.sarif

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        # Test that the image can start
        docker run --rm -d --name test-frijolebot \
          -e DISCORD_BOT_TOKEN=test \
          -e DISCORD_GUILD_ID=test \
          -e DISCORD_CHANNEL_TEST1=test \
          -e BASEROW_API_TOKEN=test \
          -e BASEROW_API_URL=test \
          -e NODE_ENV=test \
          -p 3000:3000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health check endpoint
        curl -f http://localhost:3000/health/live || exit 1
        
        # Clean up
        docker stop test-frijolebot

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test:ci

    - name: Run linting
      run: |
        # Install ESLint if not present
        npm install --save-dev eslint || true
        # Run basic syntax check
        node -c discord-link-bot.js
        node -c config/index.js
        node -c services/BaserowService.js
        node -c services/HealthCheckService.js
        node -c handlers/commandHandler.js
        node -c handlers/messageHandler.js
        node -c handlers/reactionHandler.js
        node -c utils/logger.js
        node -c utils/rateLimiter.js

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          ### Docker Image
          - **Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - **Multi-arch**: linux/amd64, linux/arm64
          - **Security**: Scanned with Trivy
          - **SBOM**: Software Bill of Materials included
          
          ### Features
          - Discord bot with link monitoring
          - Baserow integration for data storage
          - Rate limiting for slash commands
          - Health check endpoints
          - Multi-server support
          - DM-based link management
          
          ### Usage
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker run -d --name frijolebot --env-file .env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
        draft: false
        prerelease: false
